version: "3"

vars:
  PYTHON_VERSION: 3.11
  SITE_NAME: beetween

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list-all

  install:
    desc: Install dependencies using Poetry
    cmds:
      - poetry install

  serve:
    desc: Start the MkDocs development server
    cmds:
      - poetry run mkdocs serve

  serve-all:
    desc: Start the MkDocs development server accessible from all interfaces
    cmds:
      - poetry run mkdocs serve --dev-addr=0.0.0.0:8000

  build:
    desc: Build the documentation site
    cmds:
      - poetry run mkdocs build

  deploy:
    desc: Deploy to GitHub Pages
    cmds:
      - poetry run mkdocs gh-deploy

  clean:
    desc: Clean build artifacts
    cmds:
      - rm -rf site/
      - rm -rf .cache/

  lint:
    desc: Run linting tools
    cmds:
      - poetry run black docs/
      - poetry run isort docs/
      - poetry run flake8 docs/

  setup:
    desc: Initial setup - install dependencies and setup pre-commit
    cmds:
      - poetry install
      - poetry run pre-commit install
      - echo "Setup complete! Run 'task serve' to start development server"

  update:
    desc: Update dependencies
    cmds:
      - poetry update
      - poetry run pre-commit autoupdate

  # Feature management tasks
  create-feature:
    desc: Create a new feature documentation structure
    vars:
      FEATURE_NAME: '{{default "new-feature" .FEATURE_NAME}}'
    requires:
      vars: [FEATURE_NAME]
    cmds:
      - mkdir -p docs/features/{{.FEATURE_NAME}}/assets/{wireframes,designs,diagrams}
      - |
        # Create the main feature documentation from template
        sed 's/{{\.FEATURE_NAME | title}}/{{.FEATURE_NAME | title}}/g; s/{{now | date "January 2, 2006"}}/'"$(date '+%B %d, %Y')"'/g' templates/feature-template.md > docs/features/{{.FEATURE_NAME}}/index.md
      - "echo ✅ Created feature documentation for: {{.FEATURE_NAME}}"
      - 'echo "📁 Location: docs/features/{{.FEATURE_NAME}}/"'
      - 'echo "📝 Edit: docs/features/{{.FEATURE_NAME}}/index.md"'
      - echo "📝 Remember to update mkdocs.yml navigation to include your new feature"

  create-template:
    desc: Create the feature template file
    cmds:
      - mkdir -p templates
      - |
        cat > templates/feature-template.md << 'EOF'
        # {{.FEATURE_NAME | title}} Feature Overview

        ## 🎯 Feature Summary

        **Status**: 📋 Planning
        **Priority**: [High/Medium/Low]
        **Owner**: [Team Member Name]
        **Target Release**: [Sprint/Date]

        ## What This Feature Does

        [Describe what this feature does for users]

        ## User Stories

        ### As a [user type]
        - **I want to** [action]
        - **So that** [benefit]
        - **Acceptance Criteria:**
          - [ ] [Specific requirement 1]
          - [ ] [Specific requirement 2]

        ## Technical Requirements

        - [ ] [Technical requirement 1]
        - [ ] [Technical requirement 2]

        ## Dependencies

        - [ ] [Dependency 1]
        - [ ] [Dependency 2]

        ## Definition of Done

        - [ ] Feature implemented
        - [ ] Tests written and passing
        - [ ] Documentation updated
        - [ ] Code reviewed
        - [ ] QA testing complete

        ---

        **Document Owner**: [Name]
        **Created**: {{now | date "January 2, 2006"}}
        **Last Updated**: {{now | date "January 2, 2006"}}
        EOF
      - echo "✅ Feature template created at templates/feature-template.md"

  update-feature-status:
    desc: Update feature status with current date
    vars:
      FEATURE_NAME: "{{.FEATURE_NAME}}"
    requires:
      vars: [FEATURE_NAME]
    cmds:
      - |
        FEATURE_PATH="docs/features/{{.FEATURE_NAME}}/status.md"
        if [ -f "$FEATURE_PATH" ]; then
          # Update the last updated date
          if grep -q "Last Updated" "$FEATURE_PATH"; then
            sed -i '' "s/Last Updated.*/Last Updated**: $(date '+%B %d, %Y')/" "$FEATURE_PATH"
          else
            echo "**Last Updated**: $(date '+%B %d, %Y')" >> "$FEATURE_PATH"
          fi
          echo "✅ Updated status for {{.FEATURE_NAME}}"
        else
          echo "❌ Feature {{.FEATURE_NAME}} not found"
          echo "   Available features:"
          ls docs/features/ 2>/dev/null || echo "   No features found"
        fi

  list-features:
    desc: List all available features
    cmds:
      - echo "📋 Available Features:"
      - |
        if [ -d "docs/features" ]; then
          for feature_dir in docs/features/*/; do
            if [ -d "$feature_dir" ]; then
              feature_name=$(basename "$feature_dir")
              echo "   📁 $feature_name"
            fi
          done
        else
          echo "   No features directory found"
        fi
